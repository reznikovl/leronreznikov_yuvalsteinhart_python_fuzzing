<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.49.3 (20211023.0002)
 -->
<!-- Pages: 1 -->
<svg width="569pt" height="1204pt"
 viewBox="0.00 0.00 568.50 1204.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1200)">
<g id="a_graph0"><a xlink:title="PGGCFuzzer class hierarchy">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1200 564.5,-1200 564.5,4 -4,4"/>
</a>
</g>
<!-- PGGCFuzzer -->
<g id="node1" class="node">
<title>PGGCFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class PGGCFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="156,-6.5 156,-42.5 247,-42.5 247,-6.5 156,-6.5"/>
<text text-anchor="start" x="164" y="-21.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">PGGCFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="node2" class="node">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class ProbabilisticGeneratorGrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="45.5,-85.5 45.5,-171.5 357.5,-171.5 357.5,-85.5 45.5,-85.5"/>
<text text-anchor="start" x="53.5" y="-157.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGeneratorGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="45.5,-148.5 357.5,-148.5 "/>
<g id="a_node2_0"><a xlink:href="#" xlink:title="ProbabilisticGeneratorGrammarCoverageFuzzer">
<g id="a_node2_1"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="144.5" y="-137" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_2"><a xlink:href="#" xlink:title="add_tree_coverage(self, tree: DerivationTree) &#45;&gt; None">
<text text-anchor="start" x="144.5" y="-125" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_tree_coverage()</text>
</a>
</g>
<g id="a_node2_3"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="144.5" y="-115" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node2_4"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text text-anchor="start" x="144.5" y="-104" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node2_5"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="144.5" y="-93" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="edge1" class="edge">
<title>PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M201.5,-42.8C201.5,-51.86 201.5,-63.48 201.5,-75.19"/>
<polygon fill="none" stroke="black" points="198,-75.45 201.5,-85.45 205,-75.45 198,-75.45"/>
</g>
<!-- GeneratorGrammarFuzzer -->
<g id="node3" class="node">
<title>GeneratorGrammarFuzzer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class GeneratorGrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="0,-421.5 0,-606.5 185,-606.5 185,-421.5 0,-421.5"/>
<text text-anchor="start" x="12" y="-592.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GeneratorGrammarFuzzer</text>
<polyline fill="none" stroke="black" points="0,-583.5 185,-583.5 "/>
<g id="a_node3_6"><a xlink:href="#" xlink:title="GeneratorGrammarFuzzer">
<g id="a_node3_7"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="8.5" y="-572.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_8"><a xlink:href="#" xlink:title="apply_result(self, result: Any, children: List[DerivationTree]) &#45;&gt; List[DerivationTree]">
<text text-anchor="start" x="8.5" y="-560.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">apply_result()</text>
</a>
</g>
<g id="a_node3_9"><a xlink:href="#" xlink:title="choose_tree_expansion(self, tree: DerivationTree, expandable_children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `expandable_children`&#10;to be selected for expansion. Defaults to random.">
<text text-anchor="start" x="8.5" y="-550.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node3_10"><a xlink:href="#" xlink:title="eval_function(self, tree, function)">
<text text-anchor="start" x="8.5" y="-538.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">eval_function()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="#" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-528.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="#" xlink:title="find_expansion(self, tree)">
<text text-anchor="start" x="8.5" y="-516.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_expansion()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="8.5" y="-506.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="process_chosen_children(self, children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="8.5" y="-495.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="reset_generators(self) &#45;&gt; None">
<text text-anchor="start" x="8.5" y="-483.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reset_generators()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text text-anchor="start" x="8.5" y="-473.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="run_generator(self, expansion: Expansion, function: Callable) &#45;&gt; Iterator">
<text text-anchor="start" x="8.5" y="-461.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_generator()</text>
</a>
</g>
<g id="a_node3_18"><a xlink:href="#" xlink:title="run_post_functions(self, tree: DerivationTree, depth: Union[int, float] = inf) &#45;&gt; Tuple[bool, Optional[List[DerivationTree]]]">
<text text-anchor="start" x="8.5" y="-450.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions()</text>
</a>
</g>
<g id="a_node3_19"><a xlink:href="#" xlink:title="run_post_functions_locally(self, new_tree: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8.5" y="-439.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions_locally()</text>
</a>
</g>
<g id="a_node3_20"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-429.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer -->
<g id="edge2" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer</title>
<path fill="none" stroke="black" d="M187.05,-171.74C183.17,-183.44 179.06,-196.18 175.5,-208 155.17,-275.44 134.36,-351.93 118.67,-411.43"/>
<polygon fill="none" stroke="black" points="115.25,-410.65 116.09,-421.21 122.02,-412.43 115.25,-410.65"/>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer -->
<g id="node6" class="node">
<title>ProbabilisticGrammarCoverageFuzzer</title>
<g id="a_node6"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="185,-208.5 185,-272.5 436,-272.5 436,-208.5 185,-208.5"/>
<text text-anchor="start" x="193" y="-258.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="185,-249.5 436,-249.5 "/>
<g id="a_node6_21"><a xlink:href="#" xlink:title="ProbabilisticGrammarCoverageFuzzer">
<g id="a_node6_22"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="choose_covered_node_expansion(self, node, children_alternatives):&#10;Return index of expansion in _covered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="211.5" y="-238" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_covered_node_expansion()</text>
</a>
</g>
<g id="a_node6_23"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="choose_node_expansion(self, node, children_alternatives):&#10;Choose an expansion of `node` among `children_alternatives`.&#10;Return `n` such that expanding `children_alternatives[n]`&#10;yields the highest additional coverage.">
<text text-anchor="start" x="211.5" y="-227" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node6_24"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="choose_uncovered_node_expansion(self, node, children_alternatives):&#10;Return index of expansion in _uncovered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="211.5" y="-216" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_uncovered_node_expansion()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer -->
<g id="edge5" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M243.33,-171.71C252.8,-181.28 262.82,-191.38 272.14,-200.79"/>
<polygon fill="none" stroke="black" points="269.92,-203.52 279.45,-208.16 274.89,-198.6 269.92,-203.52"/>
</g>
<!-- GrammarFuzzer -->
<g id="node4" class="node">
<title>GrammarFuzzer</title>
<g id="a_node4"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="145,-799.5 145,-1083.5 324,-1083.5 324,-799.5 145,-799.5"/>
<text text-anchor="start" x="184.5" y="-1069.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="145,-1060.5 324,-1060.5 "/>
<g id="a_node4_25"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node4_26"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="153.5" y="-1049" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_27"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="153.5" y="-1038" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node4_28"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="153.5" y="-1027" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node4_29"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="any_possible_expansions(self, node: DerivationTree) &#45;&gt; bool">
<text text-anchor="start" x="153.5" y="-1015" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">any_possible_expansions()</text>
</a>
</g>
<g id="a_node4_30"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="check_grammar(self) &#45;&gt; None:&#10;Check the grammar passed">
<text text-anchor="start" x="153.5" y="-1005" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">check_grammar()</text>
</a>
</g>
<g id="a_node4_31"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="153.5" y="-994" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node4_32"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_tree_expansion(self, tree: DerivationTree, children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `children` to be selected for expansion.&#10;Defaults to random.">
<text text-anchor="start" x="153.5" y="-983" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node4_33"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="153.5" y="-971" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node()</text>
</a>
</g>
<g id="a_node4_34"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_by_cost(self, node: DerivationTree, choose: Callable = &lt;built&#45;in function min&gt;) &#45;&gt; DerivationTree">
<text text-anchor="start" x="153.5" y="-960" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_by_cost()</text>
</a>
</g>
<g id="a_node4_35"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_max_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="153.5" y="-949" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_max_cost()</text>
</a>
</g>
<g id="a_node4_36"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_min_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="153.5" y="-938" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_min_cost()</text>
</a>
</g>
<g id="a_node4_37"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_randomly(self, node: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose a random expansion for `node` and return it">
<text text-anchor="start" x="153.5" y="-927" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_randomly()</text>
</a>
</g>
<g id="a_node4_38"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Expand `tree` in a three&#45;phase strategy until all expansions are complete.">
<text text-anchor="start" x="153.5" y="-916" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree()</text>
</a>
</g>
<g id="a_node4_39"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="153.5" y="-906" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node4_40"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_with_strategy(self, tree: DerivationTree, expand_node_method: Callable, limit: Optional[int] = None):&#10;Expand tree using `expand_node_method` as node expansion function&#10;until the number of possible expansions reaches `limit`.">
<text text-anchor="start" x="153.5" y="-894" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree_with_strategy()</text>
</a>
</g>
<g id="a_node4_41"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_cost(self, expansion: Expansion, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="153.5" y="-883" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_cost()</text>
</a>
</g>
<g id="a_node4_42"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_to_children(self, expansion: Expansion) &#45;&gt; List[DerivationTree]">
<text text-anchor="start" x="153.5" y="-872" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_to_children()</text>
</a>
</g>
<g id="a_node4_43"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="init_tree(self) &#45;&gt; DerivationTree">
<text text-anchor="start" x="153.5" y="-861" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">init_tree()</text>
</a>
</g>
<g id="a_node4_44"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="log_tree(self, tree: DerivationTree) &#45;&gt; None:&#10;Output a tree if self.log is set; if self.display is also set, show the tree structure">
<text text-anchor="start" x="153.5" y="-850" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">log_tree()</text>
</a>
</g>
<g id="a_node4_45"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="possible_expansions(self, node: DerivationTree) &#45;&gt; int">
<text text-anchor="start" x="153.5" y="-839" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">possible_expansions()</text>
</a>
</g>
<g id="a_node4_46"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="process_chosen_children(self, chosen_children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="153.5" y="-829" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node4_47"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="153.5" y="-818" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
<g id="a_node4_48"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="symbol_cost(self, symbol: str, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="153.5" y="-806" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">symbol_cost()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge3" class="edge">
<title>GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M88.17,-606.61C88.71,-654.46 93.83,-713.25 111.5,-763 118.54,-782.82 128.4,-802.49 139.51,-821.1"/>
<polygon fill="none" stroke="black" points="136.67,-823.17 144.88,-829.87 142.64,-819.51 136.67,-823.17"/>
</g>
<!-- Fuzzer -->
<g id="node5" class="node">
<title>Fuzzer</title>
<g id="a_node5"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="196,-1120.5 196,-1195.5 273,-1195.5 273,-1120.5 196,-1120.5"/>
<text text-anchor="start" x="213.5" y="-1181.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="196,-1172.5 273,-1172.5 "/>
<g id="a_node5_49"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node5_50"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object at 0x10b30cc40&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="204.5" y="-1161.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node5_51"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object at 0x10b30cee0&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="204.5" y="-1150.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
<g id="a_node5_52"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="204.5" y="-1139.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node5_53"><a xlink:href="Fuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return fuzz input">
<text text-anchor="start" x="204.5" y="-1128.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge4" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M234.5,-1083.78C234.5,-1093.16 234.5,-1102.15 234.5,-1110.42"/>
<polygon fill="none" stroke="black" points="231,-1110.49 234.5,-1120.49 238,-1110.49 231,-1110.49"/>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node7" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node7"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="224,-309.5 224,-384.5 397,-384.5 397,-309.5 224,-309.5"/>
<text text-anchor="start" x="232" y="-370.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="224,-361.5 397,-361.5 "/>
<g id="a_node7_54"><a xlink:href="#" xlink:title="GrammarCoverageFuzzer">
<g id="a_node7_55"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="_new_child_coverage(self, children: List[DerivationTree], max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text text-anchor="start" x="241.5" y="-349.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_new_child_coverage()</text>
</a>
</g>
<g id="a_node7_56"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Choose an expansion of `node` among `children_alternatives`.&#10;Return `n` such that expanding `children_alternatives[n]`&#10;yields the highest additional coverage.">
<text text-anchor="start" x="241.5" y="-339.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node7_57"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="new_child_coverage(self, symbol: str, children: List[DerivationTree], max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return new coverage that would be obtained&#10;by expanding (`symbol`, `children`)">
<text text-anchor="start" x="241.5" y="-327.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_child_coverage()</text>
</a>
</g>
<g id="a_node7_58"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="new_coverages(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; Optional[List[Set[str]]]:&#10;Return coverage to be obtained for each child at minimum depth">
<text text-anchor="start" x="241.5" y="-316.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_coverages()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge6" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M310.5,-272.57C310.5,-280.96 310.5,-290.23 310.5,-299.28"/>
<polygon fill="none" stroke="black" points="307,-299.34 310.5,-309.34 314,-299.34 307,-299.34"/>
</g>
<!-- ProbabilisticGrammarFuzzer -->
<g id="node10" class="node">
<title>ProbabilisticGrammarFuzzer</title>
<g id="a_node10"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="366.5,-671 366.5,-735 560.5,-735 560.5,-671 366.5,-671"/>
<text text-anchor="start" x="374.5" y="-720.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarFuzzer</text>
<polyline fill="none" stroke="black" points="366.5,-712 560.5,-712 "/>
<g id="a_node10_59"><a xlink:href="#" xlink:title="ProbabilisticGrammarFuzzer">
<g id="a_node10_60"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="check_grammar(self) &#45;&gt; None:&#10;Check the grammar passed">
<text text-anchor="start" x="394.5" y="-700.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">check_grammar()</text>
</a>
</g>
<g id="a_node10_61"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[Any]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="394.5" y="-689.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node10_62"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="394.5" y="-678.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge10" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M369.12,-272.58C382.96,-282.5 396.34,-294.68 405.5,-309 476.59,-420.11 473.83,-584.55 467.89,-660.62"/>
<polygon fill="none" stroke="black" points="464.39,-660.5 467.04,-670.75 471.36,-661.08 464.39,-660.5"/>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node8" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node8"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="203,-482 203,-546 418,-546 418,-482 203,-482"/>
<text text-anchor="start" x="211" y="-531.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="203,-523 418,-523 "/>
<g id="a_node8_63"><a xlink:href="#" xlink:title="SimpleGrammarCoverageFuzzer">
<g id="a_node8_64"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_covered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _covered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="211.5" y="-511.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_covered_node_expansion()</text>
</a>
</g>
<g id="a_node8_65"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;Picks uncovered expansions, if any.">
<text text-anchor="start" x="211.5" y="-500.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node8_66"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_uncovered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _uncovered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="211.5" y="-489.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_uncovered_node_expansion()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge7" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M310.5,-384.62C310.5,-410.35 310.5,-444.81 310.5,-471.55"/>
<polygon fill="none" stroke="black" points="307,-471.76 310.5,-481.76 314,-471.76 307,-471.76"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node9" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node9"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="120.5,-643.5 120.5,-762.5 348.5,-762.5 348.5,-643.5 120.5,-643.5"/>
<text text-anchor="start" x="128.5" y="-748.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="120.5,-739.5 348.5,-739.5 "/>
<g id="a_node9_67"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node9_68"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="150.5" y="-728.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node9_69"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="_max_expansion_coverage(self, symbol: str, max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text text-anchor="start" x="150.5" y="-716.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_max_expansion_coverage()</text>
</a>
</g>
<g id="a_node9_70"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="add_coverage(self, symbol: str, new_child: Union[str, Tuple[str, Dict[str, Any]], List[DerivationTree]]) &#45;&gt; None">
<text text-anchor="start" x="150.5" y="-705.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_coverage()</text>
</a>
</g>
<g id="a_node9_71"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="150.5" y="-695.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node9_72"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return the set of covered expansions as strings SYMBOL &#45;&gt; EXPANSION">
<text text-anchor="start" x="150.5" y="-683.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_coverage()</text>
</a>
</g>
<g id="a_node9_73"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="max_expansion_coverage(self, symbol: Optional[str] = None, max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return set of all expansions in a grammar&#10;starting with `symbol` (default: start symbol).&#10;If `max_depth` is given, expand only to that depth.">
<text text-anchor="start" x="150.5" y="-672.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">max_expansion_coverage()</text>
</a>
</g>
<g id="a_node9_74"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="missing_expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return expansions not covered yet">
<text text-anchor="start" x="150.5" y="-661.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">missing_expansion_coverage()</text>
</a>
</g>
<g id="a_node9_75"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="reset_coverage(self) &#45;&gt; None:&#10;Clear coverage info tracked so far">
<text text-anchor="start" x="150.5" y="-650.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reset_coverage()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge8" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M297.78,-546.3C288.09,-570.13 274.4,-603.83 262.23,-633.78"/>
<polygon fill="none" stroke="black" points="258.86,-632.77 258.33,-643.36 265.34,-635.41 258.86,-632.77"/>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge9" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M234.5,-762.76C234.5,-771.1 234.5,-779.98 234.5,-789.14"/>
<polygon fill="none" stroke="black" points="231,-789.18 234.5,-799.18 238,-789.18 231,-789.18"/>
</g>
<!-- ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge11" class="edge">
<title>ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M433.09,-735.41C407.03,-762.32 368.01,-802.62 331.44,-840.39"/>
<polygon fill="none" stroke="black" points="328.6,-838.28 324.16,-847.9 333.63,-843.15 328.6,-838.28"/>
</g>
<!-- Legend -->
<g id="node11" class="node">
<title>Legend</title>
<text text-anchor="start" x="265.5" y="-42" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="265.5" y="-32" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="271.5" y="-32" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="265.5" y="-22" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="271.5" y="-22" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="265.5" y="-12" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="271.5" y="-12" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="265.5" y="-2.8" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
