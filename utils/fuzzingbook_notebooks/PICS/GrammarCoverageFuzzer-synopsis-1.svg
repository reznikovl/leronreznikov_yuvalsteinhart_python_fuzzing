<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.49.3 (20211023.0002)
 -->
<!-- Pages: 1 -->
<svg width="345pt" height="774pt"
 viewBox="0.00 0.00 345.00 774.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 770)">
<g id="a_graph0"><a xlink:title="GrammarCoverageFuzzer class hierarchy">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-770 341,-770 341,4 -4,4"/>
</a>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node1" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="27.5,-0.5 27.5,-75.5 200.5,-75.5 200.5,-0.5 27.5,-0.5"/>
<text text-anchor="start" x="35.5" y="-61.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="27.5,-52.5 200.5,-52.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="GrammarCoverageFuzzer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="_new_child_coverage(self, children: List[DerivationTree], max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text text-anchor="start" x="45" y="-40.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_new_child_coverage()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Choose an expansion of `node` among `children_alternatives`.&#10;Return `n` such that expanding `children_alternatives[n]`&#10;yields the highest additional coverage.">
<text text-anchor="start" x="45" y="-30.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="new_child_coverage(self, symbol: str, children: List[DerivationTree], max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return new coverage that would be obtained&#10;by expanding (`symbol`, `children`)">
<text text-anchor="start" x="45" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_child_coverage()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="new_coverages(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; Optional[List[Set[str]]]:&#10;Return coverage to be obtained for each child at minimum depth">
<text text-anchor="start" x="45" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_coverages()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node2" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="6.5,-112.5 6.5,-176.5 221.5,-176.5 221.5,-112.5 6.5,-112.5"/>
<text text-anchor="start" x="14.5" y="-162.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="6.5,-153.5 221.5,-153.5 "/>
<g id="a_node2_5"><a xlink:href="#" xlink:title="SimpleGrammarCoverageFuzzer">
<g id="a_node2_6"><a xlink:href="#" xlink:title="choose_covered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _covered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="15" y="-142" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_covered_node_expansion()</text>
</a>
</g>
<g id="a_node2_7"><a xlink:href="#" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;Picks uncovered expansions, if any.">
<text text-anchor="start" x="15" y="-131" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="#" xlink:title="choose_uncovered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _uncovered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="15" y="-120" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_uncovered_node_expansion()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge1" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M114,-75.55C114,-84.18 114,-93.44 114,-102.26"/>
<polygon fill="none" stroke="black" points="110.5,-102.35 114,-112.35 117.5,-102.35 110.5,-102.35"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node3" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="0,-213.5 0,-332.5 228,-332.5 228,-213.5 0,-213.5"/>
<text text-anchor="start" x="8" y="-318.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="0,-309.5 228,-309.5 "/>
<g id="a_node3_9"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node3_10"><a xlink:href="#" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="30" y="-298.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="#" xlink:title="expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return the set of covered expansions as strings SYMBOL &#45;&gt; EXPANSION">
<text text-anchor="start" x="30" y="-287.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">expansion_coverage()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="#" xlink:title="max_expansion_coverage(self, symbol: Optional[str] = None, max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return set of all expansions in a grammar&#10;starting with `symbol` (default: start symbol).&#10;If `max_depth` is given, expand only to that depth.">
<text text-anchor="start" x="30" y="-276.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">max_expansion_coverage()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="#" xlink:title="missing_expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return expansions not covered yet">
<text text-anchor="start" x="30" y="-265.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">missing_expansion_coverage()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="reset_coverage(self) &#45;&gt; None:&#10;Clear coverage info tracked so far">
<text text-anchor="start" x="30" y="-254.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">reset_coverage()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="_max_expansion_coverage(self, symbol: str, max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text text-anchor="start" x="30" y="-242.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_max_expansion_coverage()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="add_coverage(self, symbol: str, new_child: Union[str, Tuple[str, Dict[str, Any]], List[DerivationTree]]) &#45;&gt; None">
<text text-anchor="start" x="30" y="-231.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_coverage()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="30" y="-221.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge2" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M114,-176.77C114,-184.94 114,-194.07 114,-203.36"/>
<polygon fill="none" stroke="black" points="110.5,-203.46 114,-213.46 117.5,-203.46 110.5,-203.46"/>
</g>
<!-- GrammarFuzzer -->
<g id="node4" class="node">
<title>GrammarFuzzer</title>
<g id="a_node4"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="24.5,-369.5 24.5,-653.5 203.5,-653.5 203.5,-369.5 24.5,-369.5"/>
<text text-anchor="start" x="64" y="-639.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="24.5,-630.5 203.5,-630.5 "/>
<g id="a_node4_18"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node4_19"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="33" y="-619" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_20"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="33" y="-608" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node4_21"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="33" y="-597" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node4_22"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="any_possible_expansions(self, node: DerivationTree) &#45;&gt; bool">
<text text-anchor="start" x="33" y="-585" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">any_possible_expansions()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="check_grammar(self) &#45;&gt; None:&#10;Check the grammar passed">
<text text-anchor="start" x="33" y="-574" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">check_grammar()</text>
</a>
</g>
<g id="a_node4_24"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="33" y="-564" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node4_25"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_tree_expansion(self, tree: DerivationTree, children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `children` to be selected for expansion.&#10;Defaults to random.">
<text text-anchor="start" x="33" y="-552" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node4_26"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="33" y="-541" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node()</text>
</a>
</g>
<g id="a_node4_27"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_by_cost(self, node: DerivationTree, choose: Callable = &lt;built&#45;in function min&gt;) &#45;&gt; DerivationTree">
<text text-anchor="start" x="33" y="-530" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_by_cost()</text>
</a>
</g>
<g id="a_node4_28"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_max_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="33" y="-519" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_max_cost()</text>
</a>
</g>
<g id="a_node4_29"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_min_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="33" y="-508" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_min_cost()</text>
</a>
</g>
<g id="a_node4_30"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_randomly(self, node: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose a random expansion for `node` and return it">
<text text-anchor="start" x="33" y="-497" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_randomly()</text>
</a>
</g>
<g id="a_node4_31"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Expand `tree` in a three&#45;phase strategy until all expansions are complete.">
<text text-anchor="start" x="33" y="-486" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree()</text>
</a>
</g>
<g id="a_node4_32"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="33" y="-476" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node4_33"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_with_strategy(self, tree: DerivationTree, expand_node_method: Callable, limit: Optional[int] = None):&#10;Expand tree using `expand_node_method` as node expansion function&#10;until the number of possible expansions reaches `limit`.">
<text text-anchor="start" x="33" y="-464" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree_with_strategy()</text>
</a>
</g>
<g id="a_node4_34"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_cost(self, expansion: Expansion, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="33" y="-453" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_cost()</text>
</a>
</g>
<g id="a_node4_35"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_to_children(self, expansion: Expansion) &#45;&gt; List[DerivationTree]">
<text text-anchor="start" x="33" y="-442" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_to_children()</text>
</a>
</g>
<g id="a_node4_36"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="init_tree(self) &#45;&gt; DerivationTree">
<text text-anchor="start" x="33" y="-431" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">init_tree()</text>
</a>
</g>
<g id="a_node4_37"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="log_tree(self, tree: DerivationTree) &#45;&gt; None:&#10;Output a tree if self.log is set; if self.display is also set, show the tree structure">
<text text-anchor="start" x="33" y="-420" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">log_tree()</text>
</a>
</g>
<g id="a_node4_38"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="possible_expansions(self, node: DerivationTree) &#45;&gt; int">
<text text-anchor="start" x="33" y="-409" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">possible_expansions()</text>
</a>
</g>
<g id="a_node4_39"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="process_chosen_children(self, chosen_children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="33" y="-398" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node4_40"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="33" y="-388" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
<g id="a_node4_41"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="symbol_cost(self, symbol: str, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="33" y="-376" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">symbol_cost()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge3" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M114,-332.76C114,-341.1 114,-349.98 114,-359.14"/>
<polygon fill="none" stroke="black" points="110.5,-359.18 114,-369.18 117.5,-359.18 110.5,-359.18"/>
</g>
<!-- Fuzzer -->
<g id="node5" class="node">
<title>Fuzzer</title>
<g id="a_node5"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="75.5,-690.5 75.5,-765.5 152.5,-765.5 152.5,-690.5 75.5,-690.5"/>
<text text-anchor="start" x="93" y="-751.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="75.5,-742.5 152.5,-742.5 "/>
<g id="a_node5_42"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node5_43"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object at 0x1080c9f70&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="84" y="-731.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node5_44"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object at 0x1080c9a90&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="84" y="-720.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
<g id="a_node5_45"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="84" y="-709.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node5_46"><a xlink:href="Fuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return fuzz input">
<text text-anchor="start" x="84" y="-698.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge4" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M114,-653.78C114,-663.16 114,-672.15 114,-680.42"/>
<polygon fill="none" stroke="black" points="110.5,-680.49 114,-690.49 117.5,-680.49 110.5,-680.49"/>
</g>
<!-- Legend -->
<g id="node6" class="node">
<title>Legend</title>
<text text-anchor="start" x="219" y="-55.5" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="219" y="-45.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="225" y="-45.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="219" y="-35.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="225" y="-35.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="219" y="-25.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="225" y="-25.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="219" y="-16.3" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
